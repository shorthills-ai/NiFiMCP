
import os
import sys
import json
from langchain.schema import AIMessage, HumanMessage, SystemMessage
from langchain_openai import AzureChatOpenAI
from pydantic import SecretStr
import datetime
from dotenv import load_dotenv
load_dotenv()

# Prepare today's date
today_str = datetime.date.today().strftime("%B %d, %Y")

# Initialize LLM
llm = AzureChatOpenAI(
        model="gpt-4o-mini",
        api_version='2024-12-01-preview',
        azure_endpoint=os.getenv('AZURE_OPENAI_ENDPOINT', ''),
        api_key=SecretStr(os.getenv('AZURE_OPENAI_KEY', '')),
        )

def generate_ai_news_with_azure_openai(input_content):
    """
    Generate an AI News Summary using Azure OpenAI.

    Parameters:
        input_content (list): List of scraped content strings.
        azure_deployment_name (str): Name of your Azure OpenAI deployment.
        azure_api_base (str): Your Azure OpenAI endpoint (e.g., 'https://<your-resource-name>.openai.azure.com/').
        azure_api_key (str): Your Azure OpenAI API key.
        azure_api_version (str): API version (default '2023-05-15').

    Returns:
        str: AI News Summary generated by the LLM.
    """

    # Build input content string
    # combined_input = "\n\n".join(input_content)


    # Build prompt
    prompt = f"""
        You are an AI assistant tasked with creating an AI News Summary for employees.

        Here is the scraped content:

        {input_content}

        Follow this format:
        üß† AI News Summary 
        Date: {today_str}


        üåü Top Highlights

        1. Short headline 1

        ‚ûî Summary: [2-3 sentence summary]  
        ‚ûî Source Insight: [Key point or quote from the content if applicable]
        ‚ûî Source URL: [URL of the source]

        2. Short headline 2

        ‚ûî Summary: [2-3 sentence summary]  
        ‚ûî Source Insight: [Key point or quote from the content if applicable]
        ‚ûî Source URL: [URL of the source]

        (‚Ä¶continue up to 3-5 top highlights)

        
        ‚úèÔ∏è Key Takeaways

        - [Actionable takeaway or insight 1]  
        - [Actionable takeaway or insight 2]  
        - [Actionable takeaway or insight 3]


        üóÇÔ∏è Topics Covered

        - [List of topics or keywords extracted from the input]

        -----------------------------------------------------------------

        Provide a clear, concise, and structured output as per the format.
        """

    messages = [
                SystemMessage(
                    content="You are an AI assistant tasked with creating an AI News Summary for employees in an organization."
                ),
                HumanMessage(content=prompt),
            ]

    response = llm.invoke(messages)

    # Extract response
    ai_news = response.content

    return ai_news

def generate_quiz(ai_summary):
    """
    Generates a quiz based on the AI news summary.
    """
    
    prompt = f"""
        I will provide you with a summarized content from news articles and blogs.

        Your task is to create a quiz of 5 questions based on that content.

        For each question:
        - Provide 4 multiple-choice options (labeled A, B, C, D).
        - Ensure only one correct answer (but do NOT reveal the answer).
        - Make sure the quiz is clear and suitable for sending via email.

        Format the quiz like this:

        üïíüß™ Quick Quiz

        1. [Question text]
        A) [Option A]
        B) [Option B]
        C) [Option C]
        D) [Option D]

        At the end, add this instruction:
        "Reply to this email with your answers in the format: 1A, 2B, 3C, 4D, 5A."

        Here is the summarized content:
        {ai_summary}"""
    
    messages = [
                SystemMessage(
                    content="You are an AI quiz generator."
                ),
                HumanMessage(content=prompt),
            ]

    response = llm.invoke(messages)

    # Extract response
    ai_quiz = response.content

    return ai_quiz

def generate_email_content(input_content):
    """
    Generates the email content with a summary of AI news.
    """
    ai_summary = generate_ai_news_with_azure_openai(input_content)
    ai_quiz = generate_quiz(ai_summary)

    email_body = f"""Hello all,
If you want to stay updated with the world of AI, dive into below AI news summary and follow-up quiz.

{ai_summary}

{ai_quiz}

Best regards,
AI news
Shorthills AI
"""

    # Construct the dict object
    email_message = {
        "message": {
            "subject": "Weekly AI News & Quiz",
            "body": {
                "contentType": "Text",
                "content": email_body
            },
            "toRecipients": [
                {
                    "emailAddress": {
                        "address": "ghayur@shorthills.ai"
                    }
                }
            ]
        }
    }

    # Serialize the whole structure as a valid JSON string
    template = json.dumps(email_message)

    return template


# ******************************************************************************************
# Usage: python get_ai_news_content.py <scraped_news_json_file>
# The JSON file should be the output from scrape_news.py
# ******************************************************************************************


def extract_articles_with_sources(json_data):
    """
    Given the loaded JSON data from scrape_news.py, extract a list of dicts with 'content' and 'source_url'.
    Returns: List[{'content': ..., 'source_url': ..., 'title': ...}]
    """
    articles = []
    if isinstance(json_data, dict) and "articles" in json_data:
        for article in json_data["articles"]:
            if (
                isinstance(article, dict)
                and "content" in article
                and "source_url" in article
            ):
                articles.append({
                    "content": article["content"],
                    "source_url": article["source_url"],
                    "title": article.get("title", "")
                })
    return articles


if __name__ == "__main__":
    # Default output file from scrape_news.py
    SCRAPED_JSON = f"ai_news.json"

    # If a file is provided as argument, use it; else, use default
    if len(sys.argv) == 2:
        json_path = sys.argv[1]
    else:
        json_path = SCRAPED_JSON


    with open(json_path, 'r', encoding='utf-8') as f:
        json_data = json.load(f)
    articles = extract_articles_with_sources(json_data)
    if not articles:
        print("No articles found in the provided JSON.")
        sys.exit(1)

    # Prepare combined input for summary (with source info)
    combined_input = "\n\n".join([
        f"Title: {a['title']}\nSource: {a['source_url']}\nContent: {a['content']}" for a in articles
    ])

    email_body = generate_email_content(combined_input)
    print(email_body)
