name: CI - Build and Push NiFi Image on Pipeline Changes

on:
  push:
    branches:
      - 10178-CI-Pipeline  # Trigger only on test branch
    paths:
      - 'nifi_pipelines/**'  # Trigger only if files in nifi_pipelines/ or subfolders change

env:
  ACR_REGISTRY: nifiacr12345.azurecr.io
  NIFI_IMAGE_NAME: ai-studio-dev

jobs:
  build-and-push-nifi:
    name: Build and Push NiFi Image to ACR
    runs-on: ubuntu-latest
    timeout-minutes: 90  # Increased timeout for NiFi installation during build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Fetch depth 2 to enable git diff for change detection

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Detect changes in nifi_pipelines
      id: changes
      run: |
        CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^nifi_pipelines/' || echo "")
        echo "$CHANGED"
        echo "changed_files<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGED" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "nifi_pipelines_changed=false" >> $GITHUB_OUTPUT
        
        # Detect if any changes in nifi_pipelines/
        if [ -n "$CHANGED" ]; then
          echo "nifi_pipelines_changed=true" >> $GITHUB_OUTPUT
          
          # Extract unique changed pipelines (subfolders, e.g., JD_keywordExtractor, nifi_setup)
          CHANGED_PIPELINES=$(echo "$CHANGED" | awk -F/ '{print $2}' | sort | uniq | paste -sd "," -)
          echo "changed_pipelines=$CHANGED_PIPELINES" >> $GITHUB_OUTPUT
        fi

    - name: Print changed pipelines summary
      run: |
        echo "==== Changed Pipelines Summary ===="
        echo "Changed files:"
        echo "${{ steps.changes.outputs.changed_files }}"
        if [[ "${{ steps.changes.outputs.nifi_pipelines_changed }}" == "true" ]]; then
          echo "nifi_pipelines folder has changes in: ${{ steps.changes.outputs.changed_pipelines }}"
        else
          echo "No changes in nifi_pipelines/."
        fi
        echo "==============================="

    - name: Determine New Version for NiFi (if changed)
      if: steps.changes.outputs.nifi_pipelines_changed == 'true'
      id: version
      run: |
        bump_version() {
          EXISTING_TAGS=$(az acr repository show-tags \
            --name nifiacr12345 \
            --repository ${{ env.NIFI_IMAGE_NAME }} \
            --output tsv 2>/dev/null || echo "")
          LATEST=$(echo "$EXISTING_TAGS" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          if [ -z "$LATEST" ]; then
            echo "v1.0.0"
          else
            MAJOR=$(echo $LATEST | cut -d. -f1 | tr -d v)
            MINOR=$(echo $LATEST | cut -d. -f2)
            PATCH=$(echo $LATEST | cut -d. -f3)
            echo "v$MAJOR.$MINOR.$((PATCH + 1))"
          fi
        }
        
        NIFI_VERSION=$(bump_version)
        echo "NIFI_VERSION=$NIFI_VERSION" >> $GITHUB_OUTPUT

    - name: Print selected version (if changed)
      if: steps.changes.outputs.nifi_pipelines_changed == 'true'
      run: |
        echo "NiFi Version: ${{ steps.version.outputs.NIFI_VERSION }}"

    - name: Debug ACR tags (if changed)
      if: steps.changes.outputs.nifi_pipelines_changed == 'true'
      run: |
        echo "NiFi tags:"
        az acr repository show-tags --name nifiacr12345 --repository ${{ env.NIFI_IMAGE_NAME }} --output tsv

    - name: Login to ACR (if changed)
      if: steps.changes.outputs.nifi_pipelines_changed == 'true'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build & Push NiFi Image (if changed)
      if: steps.changes.outputs.nifi_pipelines_changed == 'true'
      run: |
        IMAGE="${{ env.ACR_REGISTRY }}/${{ env.NIFI_IMAGE_NAME }}:${{ steps.version.outputs.NIFI_VERSION }}"
        
        echo "üê≥ Building image: $IMAGE"
        # Dockerfile installs NiFi/dependencies and copies all from nifi_pipelines/
        timeout 60m docker build -t "$IMAGE" ./nifi || { echo '‚ùå NiFi build failed'; exit 1; }
        
        echo "üì§ Pushing image to ACR..."
        docker push "$IMAGE" || { echo '‚ùå NiFi push failed'; exit 1; }

    - name: Prune dangling images
      run: docker image prune -f
